# name: Build and Deploy

# on:
#   push:
#     branches: [ main ]
#     paths:
#       - 'backend/**'
#       - 'frontend/**'
#       - '.github/**'
#   pull_request:
#     branches: [ main ]
#     paths:
#       - 'backend/**'
#       - 'frontend/**'

# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME_PREFIX: ${{ github.repository }}

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#       packages: write

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v4
#       with:
#         token: ${{ secrets.GITHUB_TOKEN }}

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3
#       with:
#         platforms: linux/amd64,linux/arm64
#         driver-opts: |
#           image=moby/buildkit:buildx-stable-1

#     - name: Set up QEMU
#       uses: docker/setup-qemu-action@v3
#       with:
#         platforms: arm64

#     - name: Log in to Container Registry
#       uses: docker/login-action@v3
#       with:
#         registry: ${{ env.REGISTRY }}
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}

#     - name: Generate image tags
#       id: meta
#       run: |
#         # Convert repository name to lowercase for Docker registry
#         REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        
#         # Generate tag based on branch and commit
#         if [ "${{ github.ref }}" = "refs/heads/main" ]; then
#           TAG="main-$(echo ${{ github.sha }} | cut -c1-7)"
#         else
#           TAG="pr-${{ github.event.number }}-$(echo ${{ github.sha }} | cut -c1-7)"
#         fi
        
#         echo "repo_lower=${REPO_LOWER}" >> $GITHUB_OUTPUT
#         echo "tag=${TAG}" >> $GITHUB_OUTPUT
#         echo "backend_image=${REGISTRY}/${REPO_LOWER}/minitalk-backend:${TAG}" >> $GITHUB_OUTPUT
#         echo "frontend_image=${REGISTRY}/${REPO_LOWER}/minitalk-frontend:${TAG}" >> $GITHUB_OUTPUT
#         echo "backend_cache_image=${REGISTRY}/${REPO_LOWER}/minitalk-backend:cache" >> $GITHUB_OUTPUT
#         echo "frontend_cache_image=${REGISTRY}/${REPO_LOWER}/minitalk-frontend:cache" >> $GITHUB_OUTPUT

#     - name: Build and push backend image
#       uses: docker/build-push-action@v5
#       with:
#         context: ./backend
#         file: ./backend/Dockerfile
#         push: true
#         tags: |
#           ${{ steps.meta.outputs.backend_image }}
#           ${{ steps.meta.outputs.backend_cache_image }}
#         platforms: linux/amd64,linux/arm64
#         cache-from: |
#           type=gha
#           type=registry,ref=${{ steps.meta.outputs.backend_cache_image }}
#         cache-to: |
#           type=gha,mode=max
#           type=registry,ref=${{ steps.meta.outputs.backend_cache_image }},mode=max
#         build-args: |
#           BUILDKIT_INLINE_CACHE=1

#     - name: Build and push frontend image
#       uses: docker/build-push-action@v5
#       with:
#         context: ./frontend
#         file: ./frontend/Dockerfile
#         push: true
#         tags: |
#           ${{ steps.meta.outputs.frontend_image }}
#           ${{ steps.meta.outputs.frontend_cache_image }}
#         platforms: linux/amd64,linux/arm64
#         cache-from: |
#           type=gha
#           type=registry,ref=${{ steps.meta.outputs.frontend_cache_image }}
#         cache-to: |
#           type=gha,mode=max
#           type=registry,ref=${{ steps.meta.outputs.frontend_cache_image }},mode=max
#         build-args: |
#           BUILDKIT_INLINE_CACHE=1

#     - name: Update Kubernetes manifests
#       if: github.ref == 'refs/heads/main'
#       run: |
#         # Update backend image in patch file
#         sed -i "s|image: ghcr.io/.*/minitalk-backend:.*|image: ${{ steps.meta.outputs.backend_image }}|g" k8s/environments/eks/jonny/backend-patch.yaml
        
#         # Update frontend image in patch file  
#         sed -i "s|image: ghcr.io/.*/minitalk-frontend:.*|image: ${{ steps.meta.outputs.frontend_image }}|g" k8s/environments/eks/jonny/frontend-patch.yaml
        
#         # Configure git
#         git config --local user.email "action@github.com"
#         git config --local user.name "GitHub Action"
        
#         # Commit and push changes
#         git add k8s/environments/eks/jonny/backend-patch.yaml k8s/environments/eks/jonny/frontend-patch.yaml
#         git commit -m "Update image tags to ${{ steps.meta.outputs.tag }}" || exit 0
#         git push 
